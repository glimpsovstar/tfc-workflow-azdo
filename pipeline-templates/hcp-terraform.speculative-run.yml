# pipeline-templates/hcp-terraform.speculative-run.yml
# Azure DevOps Pipeline Template for HCP Terraform Speculative Run (Pull Request)
# Now includes Terraform best practices: fmt check, validate, and optional linting

name: 'HCP-Terraform-PR-$(Date:yyyyMMdd)-$(Rev:r)'

# Trigger configuration
trigger: none  # Don't trigger on pushes

# Pull Request trigger
pr:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - terraform/**
      - '**/*.tf'

# Variables - REQUIRED: Replace these with your values
variables:
  - group: 'terraform-variables'  # Create this variable group in Azure DevOps Library
  # Required variables in the terraform-variables group:
  # - TF_API_TOKEN (secret) - Your HCP Terraform API token
  # - TF_CLOUD_ORGANIZATION - Your HCP Terraform organization name  
  # - TF_WORKSPACE - Your HCP Terraform workspace name
  # - CONFIG_DIRECTORY - Directory containing Terraform configuration (default: "terraform")
  
  # Optional variables
  - name: TF_LOG
    value: 'INFO'  # Set to DEBUG for troubleshooting
  - name: TF_MAX_TIMEOUT
    value: '30m'   # Maximum timeout for operations
  - name: ENABLE_TFLINT
    value: 'true'  # Enable TFLint analysis
  - name: ENABLE_TFSEC
    value: 'true'  # Enable TFSec security scanning

# Agent pool
pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: TerraformValidation
    displayName: 'Terraform Validation & Best Practices'
    jobs:
      - job: ValidateCode
        displayName: 'Code Quality Checks'
        steps:
          - checkout: self
            displayName: 'Checkout source code'

          - template: ../tasks/display-info.yml
            parameters:
              pipelineType: 'speculative'

          # NEW: Terraform validation steps
          - template: ../tasks/terraform-validate.yml
            parameters:
              workingDirectory: $(CONFIG_DIRECTORY)
              enableTflint: $(ENABLE_TFLINT)
              enableTfsec: $(ENABLE_TFSEC)

  - stage: TerraformSpeculativeRun
    displayName: 'Terraform Speculative Run'
    dependsOn: TerraformValidation
    condition: succeeded()
    jobs:
      - job: SpeculativeRun
        displayName: 'Run Terraform Plan (Speculative)'
        steps:
          - checkout: self
            displayName: 'Checkout source code'

          - template: ../tasks/upload-configuration.yml
            parameters:
              speculative: true

          - template: ../tasks/create-run.yml
            parameters:
              planOnly: true
              message: 'Speculative run from Azure DevOps PR $(System.PullRequest.PullRequestNumber) - Validated âœ…'

          - template: ../tasks/plan-output.yml

          - template: ../tasks/run-summary.yml
            parameters:
              runType: 'speculative'

          # NEW: Quality gate summary
          - script: |
              echo "ðŸŽ‰ Pull Request Quality Gate Summary"
              echo "=================================="
              echo "âœ… Terraform Format Check: PASSED"
              echo "âœ… Terraform Validate: PASSED"
              echo "âœ… TFLint Analysis: COMPLETED"
              echo "âœ… Security Scan: COMPLETED"
              echo "âœ… Speculative Plan: COMPLETED"
              echo ""
              echo "ðŸ“‹ Review the plan output in HCP Terraform before merging"
              echo "ðŸ”— Workspace: https://app.terraform.io/app/$(TF_CLOUD_ORGANIZATION)/workspaces/$(TF_WORKSPACE)"
            displayName: 'Quality Gate Summary'
            condition: always()
