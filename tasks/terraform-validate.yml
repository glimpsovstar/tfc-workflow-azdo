# tasks/terraform-validate.yml
# Reusable task template for Terraform validation best practices
# Includes fmt check, validate, and optional linting

parameters:
  - name: workingDirectory
    type: string
    default: 'terraform'
  - name: enableTflint
    type: boolean
    default: false
  - name: enableTfsec
    type: boolean
    default: false

steps:
  # Step 1: Terraform Format Check
  - script: |
      echo "=== Terraform Format Check ==="
      cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
      
      echo "Checking Terraform formatting..."
      docker run --rm \
        -v "$(pwd):/workspace" \
        -w /workspace \
        hashicorp/terraform:light \
        terraform fmt -check -recursive
      
      if [ $? -eq 0 ]; then
        echo "✅ All Terraform files are properly formatted"
      else
        echo "❌ Terraform files need formatting"
        echo "Run 'terraform fmt -recursive' to fix formatting issues"
        exit 1
      fi
      echo "=============================="
    displayName: 'Terraform Format Check'
    
  # Step 2: Terraform Validate
  - script: |
      echo "=== Terraform Validate ==="
      cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
      
      echo "Initializing Terraform..."
      docker run --rm \
        -v "$(pwd):/workspace" \
        -w /workspace \
        hashicorp/terraform:light \
        terraform init -backend=false
      
      echo "Validating Terraform configuration..."
      docker run --rm \
        -v "$(pwd):/workspace" \
        -w /workspace \
        hashicorp/terraform:light \
        terraform validate
      
      echo "✅ Terraform configuration is valid"
      echo "=========================="
    displayName: 'Terraform Validate'

  # Step 3: TFLint (Optional)
  - ${{ if eq(parameters.enableTflint, true) }}:
    - script: |
        echo "=== TFLint Analysis ==="
        cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
        
        echo "Running TFLint..."
        docker run --rm \
          -v "$(pwd):/data" \
          -t ghcr.io/terraform-linters/tflint:latest \
          --chdir=/data
        
        echo "✅ TFLint analysis complete"
        echo "======================="
      displayName: 'TFLint Analysis'
      continueOnError: true  # Don't fail pipeline on linting issues

  # Step 4: TFSec Security Scan (Optional)
  - ${{ if eq(parameters.enableTfsec, true) }}:
    - script: |
        echo "=== TFSec Security Scan ==="
        cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
        
        echo "Running TFSec security analysis..."
        docker run --rm \
          -v "$(pwd):/src" \
          aquasec/tfsec /src \
          --format json \
          --out tfsec-results.json || true
        
        # Display results
        if [ -f tfsec-results.json ]; then
          echo "Security scan results:"
          cat tfsec-results.json | jq '.results[]?' 2>/dev/null || cat tfsec-results.json
        fi
        
        echo "✅ TFSec security scan complete"
        echo "=========================="
      displayName: 'TFSec Security Scan'
      continueOnError: true  # Don't fail pipeline on security warnings

  # Step 5: Documentation Check (Optional)
  - script: |
      echo "=== Documentation Check ==="
      cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
      
      if [ -f "README.md" ]; then
        echo "✅ README.md exists"
      else
        echo "⚠️  Consider adding README.md with module documentation"
      fi
      
      # Check for variable descriptions
      if grep -q 'description.*=' *.tf 2>/dev/null; then
        echo "✅ Variable descriptions found"
      else
        echo "⚠️  Consider adding descriptions to your variables"
      fi
      
      # Check for output descriptions  
      if grep -q 'description.*=' *.tf 2>/dev/null; then
        echo "✅ Output descriptions found"
      else
        echo "⚠️  Consider adding descriptions to your outputs"
      fi
      
      echo "========================"
    displayName: 'Documentation Check'
    continueOnError: true
EOF

# Update the speculative run pipeline template
cat > pipeline-templates/hcp-terraform.speculative-run.yml << 'EOF'
# pipeline-templates/hcp-terraform.speculative-run.yml
# Azure DevOps Pipeline Template for HCP Terraform Speculative Run (Pull Request)
# Now includes Terraform best practices: fmt check, validate, and optional linting

name: 'HCP-Terraform-PR-$(Date:yyyyMMdd)-$(Rev:r)'

# Trigger configuration
trigger: none  # Don't trigger on pushes

# Pull Request trigger
pr:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - terraform/**
      - '**/*.tf'

# Variables - REQUIRED: Replace these with your values
variables:
  - group: 'terraform-variables'  # Create this variable group in Azure DevOps Library
  # Required variables in the terraform-variables group:
  # - TF_API_TOKEN (secret) - Your HCP Terraform API token
  # - TF_CLOUD_ORGANIZATION - Your HCP Terraform organization name  
  # - TF_WORKSPACE - Your HCP Terraform workspace name
  # - CONFIG_DIRECTORY - Directory containing Terraform configuration (default: "terraform")
  
  # Optional variables
  - name: TF_LOG
    value: 'INFO'  # Set to DEBUG for troubleshooting
  - name: TF_MAX_TIMEOUT
    value: '30m'   # Maximum timeout for operations
  - name: ENABLE_TFLINT
    value: 'true'  # Enable TFLint analysis
  - name: ENABLE_TFSEC
    value: 'true'  # Enable TFSec security scanning

# Agent pool
pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: TerraformValidation
    displayName: 'Terraform Validation & Best Practices'
    jobs:
      - job: ValidateCode
        displayName: 'Code Quality Checks'
        steps:
          - checkout: self
            displayName: 'Checkout source code'

          - template: ../tasks/display-info.yml
            parameters:
              pipelineType: 'speculative'

          # NEW: Terraform validation steps
          - template: ../tasks/terraform-validate.yml
            parameters:
              workingDirectory: $(CONFIG_DIRECTORY)
              enableTflint: $(ENABLE_TFLINT)
              enableTfsec: $(ENABLE_TFSEC)

  - stage: TerraformSpeculativeRun
    displayName: 'Terraform Speculative Run'
    dependsOn: TerraformValidation
    condition: succeeded()
    jobs:
      - job: SpeculativeRun
        displayName: 'Run Terraform Plan (Speculative)'
        steps:
          - checkout: self
            displayName: 'Checkout source code'

          - template: ../tasks/upload-configuration.yml
            parameters:
              speculative: true

          - template: ../tasks/create-run.yml
            parameters:
              planOnly: true
              message: 'Speculative run from Azure DevOps PR $(System.PullRequest.PullRequestNumber) - Validated ✅'

          - template: ../tasks/plan-output.yml

          - template: ../tasks/run-summary.yml
            parameters:
              runType: 'speculative'

          # NEW: Quality gate summary
          - script: |
              echo "🎉 Pull Request Quality Gate Summary"
              echo "=================================="
              echo "✅ Terraform Format Check: PASSED"
              echo "✅ Terraform Validate: PASSED"
              echo "✅ TFLint Analysis: COMPLETED"
              echo "✅ Security Scan: COMPLETED"
              echo "✅ Speculative Plan: COMPLETED"
              echo ""
              echo "📋 Review the plan output in HCP Terraform before merging"
              echo "🔗 Workspace: https://app.terraform.io/app/$(TF_CLOUD_ORGANIZATION)/workspaces/$(TF_WORKSPACE)"
            displayName: 'Quality Gate Summary'
            condition: always()
EOF

# Update the apply pipeline template
cat > pipeline-templates/hcp-terraform.apply-run.yml << 'EOF'
# pipeline-templates/hcp-terraform.apply-run.yml
# Azure DevOps Pipeline Template for HCP Terraform Apply Run (Main Branch)
# Now includes Terraform best practices: fmt check, validate, and optional linting

name: 'HCP-Terraform-Apply-$(Date:yyyyMMdd)-$(Rev:r)'

# Trigger configuration
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - terraform/**
      - '**/*.tf'

# No PR trigger for apply pipeline
pr: none

# Variables - REQUIRED: Replace these with your values
variables:
  - group: 'terraform-variables'  # Create this variable group in Azure DevOps Library
  # Required variables in the terraform-variables group:
  # - TF_API_TOKEN (secret) - Your HCP Terraform API token
  # - TF_CLOUD_ORGANIZATION - Your HCP Terraform organization name
  # - TF_WORKSPACE - Your HCP Terraform workspace name
  # - CONFIG_DIRECTORY - Directory containing Terraform configuration (default: "terraform")
  
  # Optional variables
  - name: TF_LOG
    value: 'INFO'  # Set to DEBUG for troubleshooting
  - name: TF_MAX_TIMEOUT
    value: '30m'   # Maximum timeout for operations
  - name: ENABLE_TFLINT
    value: 'true'  # Enable TFLint analysis
  - name: ENABLE_TFSEC
    value: 'false' # Disable security scan for apply (already done in PR)

# Agent pool
pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: TerraformValidation
    displayName: 'Terraform Validation & Best Practices'
    jobs:
      - job: ValidateCode
        displayName: 'Pre-Apply Quality Checks'
        steps:
          - checkout: self
            displayName: 'Checkout source code'

          - template: ../tasks/display-info.yml
            parameters:
              pipelineType: 'apply'

          # Validation steps (even for main branch - defense in depth)
          - template: ../tasks/terraform-validate.yml
            parameters:
              workingDirectory: $(CONFIG_DIRECTORY)
              enableTflint: $(ENABLE_TFLINT)
              enableTfsec: $(ENABLE_TFSEC)

  - stage: TerraformPlan
    displayName: 'Terraform Plan'
    dependsOn: TerraformValidation
    condition: succeeded()
    jobs:
      - job: PlanTerraform
        displayName: 'Plan Terraform Changes'
        steps:
          - checkout: self
            displayName: 'Checkout source code'

          - template: ../tasks/upload-configuration.yml
            parameters:
              speculative: false

          - template: ../tasks/create-run.yml
            parameters:
              planOnly: false
              message: 'Apply run from Azure DevOps - $(Build.SourceVersion) - Validated ✅'

          - template: ../tasks/wait-for-plan.yml

  - stage: TerraformApply
    displayName: 'Terraform Apply'
    dependsOn: TerraformPlan
    condition: and(succeeded(), eq(dependencies.TerraformPlan.outputs['PlanTerraform.plan_status.STATUS'], 'planned'), eq(dependencies.TerraformPlan.outputs['PlanTerraform.plan_status.IS_CONFIRMABLE'], 'true'))
    variables:
      RUN_ID: $[ stageDependencies.TerraformPlan.PlanTerraform.outputs['create_run.RUN_ID'] ]
    jobs:
      - deployment: ApplyTerraform
        displayName: 'Apply Terraform Changes'
        environment: 'production'  # Create this environment in Azure DevOps
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - template: ../tasks/apply-run.yml
                  parameters:
                    runId: $(RUN_ID)
                    comment: 'Applied from Azure DevOps - Quality Validated ✅'

                - template: ../tasks/wait-for-apply.yml
                  parameters:
                    runId: $(RUN_ID)

                - template: ../tasks/run-summary.yml
                  parameters:
                    runType: 'apply'
                    runId: $(RUN_ID)

                # NEW: Post-apply summary
                - script: |
                    echo "🚀 Infrastructure Deployment Summary"
                    echo "==================================="
                    echo "✅ Terraform Format Check: PASSED"
                    echo "✅ Terraform Validate: PASSED" 
                    echo "✅ Quality Checks: PASSED"
                    echo "✅ Terraform Plan: COMPLETED"
                    echo "✅ Terraform Apply: COMPLETED"
                    echo ""
                    echo "📊 View details in HCP Terraform:"
                    echo "🔗 Workspace: https://app.terraform.io/app/$(TF_CLOUD_ORGANIZATION)/workspaces/$(TF_WORKSPACE)"
                    echo "🔗 Run: https://app.terraform.io/app/$(TF_CLOUD_ORGANIZATION)/workspaces/$(TF_WORKSPACE)/runs/$(RUN_ID)"
                  displayName: 'Deployment Summary'
                  condition: always()
EOF

# Update documentation to reflect best practices
cat >> docs/README.md << 'EOF'

## Terraform Best Practices

Our pipeline templates now include comprehensive Terraform best practices:

### Code Quality Checks
- **terraform fmt -check**: Ensures consistent formatting
- **terraform validate**: Validates syntax and configuration
- **TFLint**: Advanced linting for Terraform code
- **TFSec**: Security scanning for infrastructure code
- **Documentation checks**: Ensures proper variable/output descriptions

### Pipeline Flow
1. **Validation Stage**: All quality checks must pass
2. **Plan Stage**: Create Terraform plan in HCP Terraform
3. **Apply Stage**: Apply changes (main branch only)

### Quality Gates
- All PRs must pass validation before plan
- All main branch commits validated before apply
- Security scanning results available for review
- Formatting enforced automatically

### Customization
Enable/disable features via pipeline variables:
```yaml
variables:
  - name: ENABLE_TFLINT
    value: 'true'  # Enable TFLint analysis
  - name: ENABLE_TFSEC
    value: 'true'  # Enable security scanning
```
EOF
