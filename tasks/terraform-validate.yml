# tasks/terraform-validate.yml
# Reusable task template for Terraform validation best practices
# Includes fmt check, validate, and optional linting

parameters:
  - name: workingDirectory
    type: string
    default: 'terraform'
  - name: enableTflint
    type: boolean
    default: false
  - name: enableTfsec
    type: boolean
    default: false

steps:
  # Step 1: Terraform Format Check
  - script: |
      echo "=== Terraform Format Check ==="
      cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
      
      echo "Checking Terraform formatting..."
      docker run --rm \
        -v "$(pwd):/workspace" \
        -w /workspace \
        hashicorp/terraform:light \
        terraform fmt -check -recursive
      
      if [ $? -eq 0 ]; then
        echo "✅ All Terraform files are properly formatted"
      else
        echo "❌ Terraform files need formatting"
        echo "Run 'terraform fmt -recursive' to fix formatting issues"
        exit 1
      fi
      echo "=============================="
    displayName: 'Terraform Format Check'
    
  # Step 2: Terraform Validate
  - script: |
      echo "=== Terraform Validate ==="
      cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
      
      echo "Initializing Terraform..."
      docker run --rm \
        -v "$(pwd):/workspace" \
        -w /workspace \
        hashicorp/terraform:light \
        terraform init -backend=false
      
      echo "Validating Terraform configuration..."
      docker run --rm \
        -v "$(pwd):/workspace" \
        -w /workspace \
        hashicorp/terraform:light \
        terraform validate
      
      echo "✅ Terraform configuration is valid"
      echo "=========================="
    displayName: 'Terraform Validate'

  # Step 3: TFLint (Optional)
  - ${{ if eq(parameters.enableTflint, true) }}:
    - script: |
        echo "=== TFLint Analysis ==="
        cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
        
        echo "Running TFLint..."
        docker run --rm \
          -v "$(pwd):/data" \
          -t ghcr.io/terraform-linters/tflint:latest \
          --chdir=/data
        
        echo "✅ TFLint analysis complete"
        echo "======================="
      displayName: 'TFLint Analysis'
      continueOnError: true  # Don't fail pipeline on linting issues

  # Step 4: TFSec Security Scan (Optional)
  - ${{ if eq(parameters.enableTfsec, true) }}:
    - script: |
        echo "=== TFSec Security Scan ==="
        cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
        
        echo "Running TFSec security analysis..."
        docker run --rm \
          -v "$(pwd):/src" \
          aquasec/tfsec /src \
          --format json \
          --out tfsec-results.json || true
        
        # Display results
        if [ -f tfsec-results.json ]; then
          echo "Security scan results:"
          cat tfsec-results.json | jq '.results[]?' 2>/dev/null || cat tfsec-results.json
        fi
        
        echo "✅ TFSec security scan complete"
        echo "=========================="
      displayName: 'TFSec Security Scan'
      continueOnError: true  # Don't fail pipeline on security warnings

  # Step 5: Documentation Check (Optional)
  - script: |
      echo "=== Documentation Check ==="
      cd $(Build.SourcesDirectory)/${{ parameters.workingDirectory }}
      
      if [ -f "README.md" ]; then
        echo "✅ README.md exists"
      else
        echo "⚠️  Consider adding README.md with module documentation"
      fi
      
      # Check for variable descriptions
      if grep -q 'description.*=' *.tf 2>/dev/null; then
        echo "✅ Variable descriptions found"
      else
        echo "⚠️  Consider adding descriptions to your variables"
      fi
      
      # Check for output descriptions  
      if grep -q 'description.*=' *.tf 2>/dev/null; then
        echo "✅ Output descriptions found"
      else
        echo "⚠️  Consider adding descriptions to your outputs"
      fi
      
      echo "========================"
    displayName: 'Documentation Check'
    continueOnError: true
